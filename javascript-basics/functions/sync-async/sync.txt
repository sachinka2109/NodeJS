Synchronous Javascript-How Function Execution Stack Works

So what happens when you define a function and then invoke it? The JavaScript engine maintains a stack data structure called function execution stack. The purpose of the stack is to track the current function in execution. It does the following:

    When the JavaScript engine invokes a function, it adds it to the stack, and the execution starts.
    If the currently executed function calls another function, the engine adds the second function to the stack and starts executing it.
    Once it finishes executing the second function, the engine takes it out from the stack.
    The control goes back to resume the execution of the first function from the point it left it last time.
    Once the execution of the first function is over, the engine takes it out of the stack.
    Continue the same way until there is nothing to put into the stack.

The function execution stack is also known as the Call Stack.

